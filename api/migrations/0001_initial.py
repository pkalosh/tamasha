# Generated by Django 5.2.1 on 2025-09-09 23:32

import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Ad",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("image", models.ImageField(upload_to="ads")),
                ("description", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Ad",
                "verbose_name_plural": "Ads",
            },
        ),
        migrations.CreateModel(
            name="Blog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("image", models.ImageField(upload_to="blogs")),
                ("description", models.TextField(blank=True, null=True)),
                ("source", models.CharField(blank=True, max_length=255, null=True)),
                ("link", models.CharField(blank=True, max_length=255, null=True)),
                ("author", models.CharField(blank=True, max_length=255, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Blog",
                "verbose_name_plural": "Blogs",
            },
        ),
        migrations.CreateModel(
            name="Event",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
                ("location", models.CharField(blank=True, max_length=255, null=True)),
                ("latitude", models.CharField(blank=True, max_length=255, null=True)),
                ("longitude", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "banner",
                    models.ImageField(blank=True, null=True, upload_to="events"),
                ),
                (
                    "floor_plan",
                    models.ImageField(blank=True, null=True, upload_to="floor_plan"),
                ),
                (
                    "instagram_url",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("x_url", models.CharField(blank=True, max_length=255, null=True)),
                ("meta_url", models.CharField(blank=True, max_length=255, null=True)),
                ("updated_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("venue", models.CharField(blank=True, max_length=255, null=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Event",
                "verbose_name_plural": "Events",
            },
        ),
        migrations.CreateModel(
            name="Invoice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "invoice_number",
                    models.CharField(blank=True, max_length=20, unique=True),
                ),
                ("data", models.JSONField()),
                ("is_paid", models.BooleanField(default=False)),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                ("paid_at", models.DateTimeField(blank=True, null=True)),
                (
                    "mpesa_receipt",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("invoice_amount", models.FloatField(blank=True, null=True)),
                ("ticket_quantity", models.PositiveBigIntegerField(default=0)),
                ("is_complementary", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Invoice",
                "verbose_name_plural": "Invoices",
            },
        ),
        migrations.CreateModel(
            name="MpesaCallback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("body", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "MpesaCallback",
                "verbose_name_plural": "MpesaCallbacks",
            },
        ),
        migrations.CreateModel(
            name="MpesaResponseBody",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("body", models.JSONField()),
            ],
            options={
                "verbose_name": "MpesaResponseBody",
                "verbose_name_plural": "MpesaResponseBodies",
                "db_table": "MpesaResponseBodies",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="MpesaStkPushRequestResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("merchant_request_id", models.CharField(max_length=100)),
                ("checkout_request_id", models.CharField(max_length=100)),
                ("response_code", models.CharField(max_length=10)),
                ("response_description", models.CharField(max_length=255)),
                ("customer_message", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("invoice_number", models.CharField(blank=True, max_length=20)),
                ("is_paid", models.BooleanField(default=False)),
                ("fcm_token", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "primary_email",
                    models.EmailField(blank=True, max_length=254, null=True),
                ),
                ("amount", models.FloatField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "MpesaStkPushRequestResponse",
                "verbose_name_plural": "MpesaStkPushRequestResponses",
            },
        ),
        migrations.CreateModel(
            name="Reset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email", models.CharField(max_length=255)),
                ("token", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Reset",
                "verbose_name_plural": "Reset",
                "db_table": "Resets",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tag", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Tag",
                "verbose_name_plural": "Tags",
            },
        ),
        migrations.CreateModel(
            name="Transaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "transaction_no",
                    models.CharField(default=uuid.uuid4, max_length=50, unique=True),
                ),
                (
                    "phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        max_length=128, region=None
                    ),
                ),
                ("checkout_request_id", models.CharField(max_length=200)),
                ("reference", models.CharField(blank=True, max_length=40)),
                ("description", models.TextField(blank=True, null=True)),
                ("amount", models.CharField(max_length=10)),
                (
                    "status",
                    models.CharField(
                        choices=[(0, "Complete"), (1, "Pending"), (2, "Cancelled")],
                        default=1,
                        max_length=15,
                    ),
                ),
                ("event_no", models.CharField(blank=True, max_length=200, null=True)),
                ("ticket_id", models.CharField(blank=True, max_length=200, null=True)),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("ip", models.CharField(blank=True, max_length=200, null=True)),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Transaction",
                "verbose_name_plural": "Transactions",
                "db_table": "Transactions",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="TransactionStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("result", models.TextField()),
            ],
            options={
                "verbose_name": "TransactionStatus",
                "verbose_name_plural": "TransactionStatuses",
            },
        ),
        migrations.CreateModel(
            name="UserToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("user_id", models.IntegerField()),
                ("token", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expired_at", models.DateTimeField()),
            ],
            options={
                "verbose_name": "UserToken",
                "verbose_name_plural": "UserTokens",
                "db_table": "UserTokens",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
                ("mobile", models.CharField(blank=True, max_length=255, null=True)),
                ("email", models.CharField(max_length=255, unique=True)),
                ("password", models.CharField(max_length=255)),
                ("is_active", models.BooleanField(default=True)),
                ("is_admin", models.BooleanField(default=False)),
                ("is_event_admin", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "Users",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Gallery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image", models.ImageField(upload_to="gallery")),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now_add=True)),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.event",
                    ),
                ),
            ],
            options={
                "verbose_name": "Gallery",
                "verbose_name_plural": "Galleries",
            },
        ),
        migrations.CreateModel(
            name="MpesaPayment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("merchant_request_id", models.CharField(max_length=255)),
                ("checkout_request_id", models.CharField(max_length=255)),
                ("result_code", models.IntegerField()),
                ("result_desc", models.CharField(max_length=255)),
                ("amount", models.DecimalField(decimal_places=2, max_digits=10)),
                ("mpesa_receipt_number", models.CharField(max_length=255, unique=True)),
                ("balance", models.CharField(blank=True, max_length=255, null=True)),
                ("transaction_date", models.BigIntegerField()),
                ("phone_number", models.BigIntegerField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "invoice_number",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.invoice",
                    ),
                ),
            ],
            options={
                "verbose_name": "MpesaPayment",
                "verbose_name_plural": "MpesaPayments",
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "organization_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("address", models.CharField(blank=True, max_length=255, null=True)),
                ("city", models.CharField(blank=True, max_length=255, null=True)),
                ("county", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "constituency",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("ward", models.CharField(blank=True, max_length=255, null=True)),
                ("postcode", models.CharField(blank=True, max_length=255, null=True)),
                ("country", models.CharField(blank=True, max_length=255, null=True)),
                ("phone", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "logo",
                    models.ImageField(blank=True, null=True, upload_to="profilelogo"),
                ),
                ("status", models.BooleanField(default=False)),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "verification_statement",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("subscription_status", models.BooleanField(default=False)),
                (
                    "kra_certificate",
                    models.FileField(
                        blank=True, null=True, upload_to="kra_certificate"
                    ),
                ),
                (
                    "incorporation_certficate",
                    models.FileField(
                        blank=True, null=True, upload_to="incorporation_certificate"
                    ),
                ),
                ("cr_12", models.FileField(blank=True, null=True, upload_to="cr_12")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_updated_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Profile",
                "verbose_name_plural": "Profiles",
                "db_table": "Profiles",
                "managed": True,
            },
        ),
        migrations.AddField(
            model_name="event",
            name="organization",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.profile"
            ),
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("status", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expiry_date", models.DateTimeField()),
                ("amount", models.IntegerField()),
                ("amount_paid", models.IntegerField()),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "mpesa_trn_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.transaction",
                    ),
                ),
            ],
            options={
                "verbose_name": "Subscription",
                "verbose_name_plural": "Subscriptions",
                "db_table": "Subscriptions",
                "managed": True,
            },
        ),
        migrations.AddField(
            model_name="profile",
            name="subscription",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="api.subscription",
            ),
        ),
        migrations.AddField(
            model_name="event",
            name="tags",
            field=models.ManyToManyField(to="api.tag"),
        ),
        migrations.CreateModel(
            name="Ticket",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "invoice_number",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("email", models.EmailField(max_length=254)),
                ("first_name", models.CharField(max_length=255)),
                ("last_name", models.CharField(max_length=255)),
                ("phone", models.CharField(max_length=255)),
                (
                    "amount_paid",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=65),
                ),
                ("is_paid", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("RF_id", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "qr_code",
                    models.ImageField(blank=True, null=True, upload_to="Tickets"),
                ),
                (
                    "ticket_code",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                ("email_to", models.EmailField(blank=True, max_length=254, null=True)),
                (
                    "mpesa_receipt",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("pdf_path", models.CharField(blank=True, max_length=255, null=True)),
                ("is_complementary", models.BooleanField(default=False)),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.event"
                    ),
                ),
                (
                    "invoice_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="api.invoice",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ticket",
                "verbose_name_plural": "Tickets",
            },
        ),
        migrations.CreateModel(
            name="DispatchComplemetaryTickets",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_emailed", models.BooleanField(default=False)),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, null=True)),
                ("file_path", models.CharField(max_length=255)),
                (
                    "invoice_number",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING, to="api.invoice"
                    ),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING, to="api.ticket"
                    ),
                ),
            ],
            options={
                "verbose_name": "DispatchComplemetaryTickets",
                "verbose_name_plural": "DispatchComplemetaryTicketss",
            },
        ),
        migrations.CreateModel(
            name="CustomerEmail",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("message", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("receiver", models.EmailField(max_length=254)),
                ("sender", models.EmailField(max_length=254)),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.event",
                    ),
                ),
                (
                    "ticket_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.ticket",
                    ),
                ),
            ],
            options={
                "verbose_name": "CustomerEmail",
                "verbose_name_plural": "CustomerEmails",
            },
        ),
        migrations.CreateModel(
            name="ComplementaryTicketDispatch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_emailed", models.BooleanField(default=False)),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("file_path", models.CharField(max_length=255)),
                (
                    "invoice_number",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING, to="api.invoice"
                    ),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING, to="api.ticket"
                    ),
                ),
            ],
            options={
                "verbose_name": "ComplementaryTicketDispatch",
                "verbose_name_plural": "ComplementaryTicketDispatches",
            },
        ),
        migrations.CreateModel(
            name="TicketCheckInLogger",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("scan_in_at", models.DateTimeField(blank=True, null=True)),
                ("scan_out_at", models.DateTimeField(blank=True, null=True)),
                (
                    "scanned_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "ticket",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING, to="api.ticket"
                    ),
                ),
            ],
            options={
                "verbose_name": "TicketCheckInLogger",
                "verbose_name_plural": "TicketCheckInLoggers",
            },
        ),
        migrations.CreateModel(
            name="TicketType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                (
                    "price",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=65),
                ),
                ("available_tickets", models.IntegerField(default=0)),
                (
                    "ticket_type_banner",
                    models.ImageField(
                        blank=True, null=True, upload_to="tickect_banner"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("start_date", models.DateTimeField(blank=True, null=True)),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                (
                    "event",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="api.event",
                    ),
                ),
            ],
            options={
                "verbose_name": "TicketType",
                "verbose_name_plural": "TicketTypes",
            },
        ),
        migrations.AddField(
            model_name="ticket",
            name="ticket_type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="api.tickettype"
            ),
        ),
        migrations.CreateModel(
            name="Discount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("coupon", models.CharField(max_length=255)),
                ("discount_rate", models.FloatField()),
                ("is_active", models.BooleanField(default=False)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("start_date", models.DateTimeField(blank=True, null=True)),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "ticket_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.tickettype"
                    ),
                ),
            ],
            options={
                "verbose_name": "Discount",
                "verbose_name_plural": "Discounts",
            },
        ),
    ]
